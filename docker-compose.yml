services:
  config-service:
    build:
      context: ./services/config-server
    volumes:
      - ./services/config-server:/app
      - ~/.m2:/root/.m2
    ports:
      - "8888:8080"
    command: mvn spring-boot:run
    networks:
      - microservices-net

  discovery-service:
    build:
      context: ./services/discovery
    volumes:
      - ./services/discovery:/app
      - ~/.m2:/root/.m2
    ports:
      - "8761:8080"
    command: ./wait-for.sh config-service 8080 mvn spring-boot:run
    networks:
      - microservices-net

  developer-service:
    build:
      context: ./services/developer
    volumes:
      - ./services/developer:/app
      - ~/.m2:/root/.m2
    ports:
      - "8010:8080"
    environment:
      - POSTGRESQL_LOGIN=${POSTGRESQL_LOGIN}
      - POSTGRESQL_PASSWORD=${POSTGRESQL_PASSWORD}
      - POSTGRESQL_PORT=${POSTGRESQL_PORT}
    command: ./wait-for.sh discovery-service 8080 mvn spring-boot:run
    networks:
      - microservices-net

  project-service:
    build:
      context: ./services/project
    volumes:
      - ./services/project:/app
      - ~/.m2:/root/.m2
    ports:
      - "8020:8080"
    environment:
      - POSTGRESQL_LOGIN=${POSTGRESQL_LOGIN}
      - POSTGRESQL_PASSWORD=${POSTGRESQL_PASSWORD}
      - POSTGRESQL_PORT=${POSTGRESQL_PORT}
    command: ./wait-for.sh discovery-service 8080 mvn spring-boot:run
    networks:
      - microservices-net

  task-service:
    build:
      context: ./services/task
    volumes:
      - ./services/task:/app
      - ~/.m2:/root/.m2
    ports:
      - "8030:8080"
    environment:
      - POSTGRESQL_LOGIN=${POSTGRESQL_LOGIN}
      - POSTGRESQL_PASSWORD=${POSTGRESQL_PASSWORD}
      - POSTGRESQL_PORT=${POSTGRESQL_PORT}
    command: ./wait-for.sh discovery-service 8080 mvn spring-boot:run
    networks:
      - microservices-net

  notification-service:
    build:
      context: ./services/notification
    volumes:
      - ./services/notification:/app
      - ~/.m2:/root/.m2
    ports:
      - "8040:8080"
    environment:
      - MONGODB_LOGIN=${MONGODB_LOGIN}
      - MONGODB_PASSWORD=${MONGODB_PASSWORD}
      - MONGODB_PORT=${MONGODB_PORT}
    command: ./wait-for.sh discovery-service 8080 mvn spring-boot:run
    networks:
      - microservices-net

  gateway-service:
    build:
      context: ./services/gateway
    volumes:
      - ./services/gateway:/app
      - ~/.m2:/root/.m2
    ports:
      - "8222:8080"
    command: ./wait-for.sh discovery-service 8080 mvn spring-boot:run
    networks:
      - microservices-net

  postgres:
    container_name: postgresql
    image: postgres
    environment:
      POSTGRES_USER: ${POSTGRESQL_LOGIN}
      POSTGRES_PASSWORD: ${POSTGRESQL_PASSWORD}
      PGDATA: /data/postgres
    volumes:
      - postgres:/data/postgres
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - ${POSTGRESQL_PORT}:5432
    networks:
      - microservices-net
    restart: unless-stopped

  mongodb:
    image: mongo
    container_name: mongo
    ports:
      - 27017:27017
    volumes:
      - mongo:/data
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: admin
    networks:
      - microservices-net

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 22181:2181
    networks:
      - microservices-net

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: ms_kafka
    ports:
      - 9092:9092
    depends_on:
      - zookeeper
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@localhost:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LOG_DIRS: /var/lib/kafka/data
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      CLUSTER_ID: "Mk3OEYBSD34fcwNTJENDM2Qk"
    networks:
      - microservices-net

  mail-dev:
    container_name: ms_mail_dev
    image: maildev/maildev
    ports:
      - 1080:1080
      - 1025:1025
    networks:
      - microservices-net

  zipkin:
    container_name: zipkin
    image: openzipkin/zipkin
    ports:
      - 9411:9411
    networks:
      - microservices-net

networks:
  microservices-net:
    driver: bridge

volumes:
  postgres:
  mongo: